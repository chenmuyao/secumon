// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/event/monitor/publisher.go
//
// Generated by this command:
//
//	mockgen -source=./internal/event/monitor/publisher.go -package=monitormocks -destination=./internal/event/monitor/mocks/publisher.mock.go
//

// Package monitormocks is a generated GoMock package.
package monitormocks

import (
	context "context"
	reflect "reflect"

	domain "github.com/chenmuyao/secumon/internal/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockLogMonitorPublisher is a mock of LogMonitorPublisher interface.
type MockLogMonitorPublisher struct {
	ctrl     *gomock.Controller
	recorder *MockLogMonitorPublisherMockRecorder
	isgomock struct{}
}

// MockLogMonitorPublisherMockRecorder is the mock recorder for MockLogMonitorPublisher.
type MockLogMonitorPublisherMockRecorder struct {
	mock *MockLogMonitorPublisher
}

// NewMockLogMonitorPublisher creates a new mock instance.
func NewMockLogMonitorPublisher(ctrl *gomock.Controller) *MockLogMonitorPublisher {
	mock := &MockLogMonitorPublisher{ctrl: ctrl}
	mock.recorder = &MockLogMonitorPublisherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogMonitorPublisher) EXPECT() *MockLogMonitorPublisherMockRecorder {
	return m.recorder
}

// Publish mocks base method.
func (m *MockLogMonitorPublisher) Publish(ctx context.Context, log domain.AccessLog) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", ctx, log)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockLogMonitorPublisherMockRecorder) Publish(ctx, log any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockLogMonitorPublisher)(nil).Publish), ctx, log)
}
